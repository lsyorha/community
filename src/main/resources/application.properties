# 应用服务 WEB 访问端口
server.port=8080
#服务器路径
server.servlet.context-path=/community
#server.servlet.context-path=yorha
# THYMELEAF (ThymeleafAutoConfiguration)
# 开启模板缓存（默认值： true ）
spring.thymeleaf.cache=false
# 检查模板是否存在，然后再呈现
spring.thymeleaf.check-template=true
# 检查模板位置是否正确（默认值 :true ）
spring.thymeleaf.check-template-location=true
#Content-Type 的值（默认值： text/html ）
spring.thymeleaf.content-type=text/html
# 开启 MVC Thymeleaf 视图解析（默认值： true ）
spring.thymeleaf.enabled=true
# 模板编码
spring.thymeleaf.encoding=UTF-8
# 要被排除在解析之外的视图名称列表，⽤逗号分隔
spring.thymeleaf.excluded-view-names=
# 要运⽤于模板之上的模板模式。另⻅ StandardTemplate-ModeHandlers( 默认值： HTML5)
spring.thymeleaf.mode=HTML5
# 在构建 URL 时添加到视图名称前的前缀（默认值： classpath:/templates/ ）
spring.thymeleaf.prefix=classpath:/templates/
# 在构建 URL 时添加到视图名称后的后缀（默认值： .html ）
spring.thymeleaf.suffix=.html
# 数据库相关
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/community
spring.datasource.username=root
spring.datasource.password=123456
spring.task.scheduling.pool.size=15
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000

mybatis.type-aliases-package=com.nowcoder.demo1.entity
mybatis.mapper-locations=classpath:/mapper/*.xml
#自动生成id的机制
mybatis.configuration.use-generated-keys=true
mybatis.configuration.map-underscore-to-camel-case=true
#增加日志 方便查看mybatis的SQL语句是否错误
#logger
#输出debug级别的日志
#logging.level.root=debug
#logging.level.com.nowcoder.demo1=debug
#logging.file.path=d:/work/data/nowcoder/community.log

#邮箱
#必加项，不然创建mailSender时会报错找不到bean
spring.mail.host=smtp.qq.com

spring.mail.username=3235195304@qq.com
#接收方显示的发送方名称
mail.from.name=yorha
spring.mail.password=
spring.mail.protocol=smtp

#开启加密验证，qq特需（或许
spring.mail.properties.mail.smtp.ssl.enable=true
spring.mail.default-encoding=utf-8

#项目路径
community.path.domain=http://localhost:8080
community.upload.path=D:/work/data/upload

#集成redis
# Redis数据库索引（默认为0），默认有16个数据库
spring.data.redis.database=10
spring.data.redis.host=127.0.0.1
spring.data.redis.port=6379

#集成kafka
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=test-consumer-group
#是否自动提交offset，偏移量
spring.kafka.consumer.enable-auto-commit=true
#自动提交的频率
spring.kafka.consumer.auto-commit-interval=3000

# Elasticsearch属性
#spring.data.elasticsearch.cluster-name=nowcoder
#spring.data.elasticsearch.cluster-nodes=localhost:9300

# 线程池配置 TaskExecutionProperties
#核心线程数
spring.task.execution.pool.core-size = 5
#最大线程数，当核心线程数满了之后，先会将任务放入队列中，队列满了之后，才会创建新的线程，直到最大线程数
spring.task.execution.pool.max-size = 10
#队列容量
spring.task.execution.pool.queue-capacity = 100

#quartz配置，默认缓存到内存，需添加一下配置，持久化到数据库
spring.quartz.job-store-type=jdbc
spring.quartz.scheduler-name=communityScheduler
spring.quartz.properties.org.quartz.scheduler.instanceld = AUTO
spring.quartz.properties.org.quartz.jobStore.class=org.springframework.scheduling.quartz.LocalDataSourceJobStore
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
spring.quartz.properties.org.quartz.jobStore.isClustered=true
spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
spring.quartz.properties.org.quartz.threadPool.threadCount=5

