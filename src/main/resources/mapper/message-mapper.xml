<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.demo1.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>
<!--    select id, from_id, to_id, conversation_id, content, status, create_time
    from message
    where id in(select max(id) from message
    where status != 2 and from_id !=1
    group by conversation_id
    )
    order by id desc
    limit 0, 10-->

    <select id="selectConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from community.message
        where id in (
        select max(id) from community.message
        where status != 2
        and from_id != 1
        and (from_id = #{userId} or to_id = #{userId})
        group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectConversationCount" resultType="int">
            select count(m.maxid)
#会话的最后一条消息
        from (select max(id) as maxid from community.message
              where status != 2
                and from_id != 1
                and (from_id = #{userId} or to_id = #{userId})
              group by conversation_id
             ) as m
    </select>

    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"/>
            from community.message
            where conversation_id = #{conversationId}
            and status != 2
            and from_id != 1
            order by id desc
            limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(id) from community.message
        where
        status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <select id="selectLetterUnreadCount" resultType="int">
        select count(id) from community.message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId != null">
        and conversation_id = #{conversationId}
        </if>
    </select>

    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into community.message(<include refid="insertFields"/>)
        values(#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <update id="updateStatus">
        update community.message set status = #{status}
                                 where id in
   <foreach collection="ids" item="id" open="(" separator="," close=")">#{id}</foreach>
    </update>

    <select id="selectLastNotice" resultType="Message">
        select <include refid="selectFields"/>
        from community.message
        where id in(
        select max(id) from community.message
        #                                通知未被删除
        where status !=2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic})
    </select>

    <select id="selectNoticeCount" resultType="int">
        select count(id) from community.message
        where status !=2
          and from_id = 1
          and to_id = #{userId}
          and conversation_id = #{topic}
    </select>

    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id) from community.message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        #           conversation_id传入为空时，查询所有未读消息
        <if test="topic != null">
            and conversation_id = #{topic}
        </if>
    </select>

    <select id="selectNotices" resultType="Message">
        select <include refid="selectFields"/>
            from community.message
            where status !=2
            and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{topic}
            order by create_time desc
            limit #{offset},#{limit}
    </select>
</mapper>